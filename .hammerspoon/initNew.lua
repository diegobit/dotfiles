-- require 'caffeine'

-- to be passed as last parameter to functions that call hs.eventtap.keyStroke in order to have no delay
-- no_delay = hs.eventtap.keyRepeatDelay()

require 'hyper'

function ternary ( cond , T , F )
    if cond then return T else return F end
end

-------------------------------
-- HYPER MODE CONFIGURATIONS
-------------------------------

-- Event generated by us must be tagged in order to distinguish them from real events.
local tagIgnore = 64734
local tagKeep = 34763
local eventSourceUserData = hs.eventtap.event.properties.eventSourceUserData
local keyTypes = hs.eventtap.event.types
local keyCodes = hs.keycodes.map

-- FUNCTIONS

keyTypeFunctions = {
  [keyTypes.keyDown] =   function(event, key, modifiers, tag)
                          -- print("DOWN: " .. key .. " " .. tag)
                          event.newKeyEvent(modifiers, string.lower(key), true):
                            setProperty(eventSourceUserData, ternary(tag==nil,0,tag)):
                            post()
                          -- k.triggered = true
                        end,
  [keyTypes.keyUp] =     function(event, key, modifiers, tag)
                          -- print("UP: " .. key .. " " .. tag)
                          event.newKeyEvent(modifiers, string.lower(key), false):
                            setProperty(eventSourceUserData, ternary(tag==nil,0,tag)):
                            post()
                        end,
  -- ["keyRepeat"] = function(event, key, modifiers, tag)
  --                   print("REPEAT: " .. key .. " " .. tag)
  --                   event.newKeyEvent(modifiers, string.lower(key), true):
  --                     setProperty(eventSourceUserData, tag):
  --                     post()
  --                   hs.timer.usleep(10) -- little delay to mimic the system keyRepeatTime
  --                 end
}

-- funKeyDown = function(event, key, modifiers, tag)
--   print("down " .. key)
--   event.newKeyEvent(modifiers, string.lower(key), true):
--     setProperty(eventSourceUserData, tag):
--     post()
--   -- k.triggered = true
-- end

-- funKeyUp = function(event, key, modifiers, tag)
--   print("up " .. key)
--   event.newKeyEvent(modifiers, string.lower(key), false):
--     setProperty(eventSourceUserData, tag):
--     post()
-- end

-- funKeyRepeat = function(event, key, modifiers, tag)
--   print("repeat " .. key)
--   event.newKeyEvent(modifiers, string.lower(key), true):
--     setProperty(eventSourceUserData, tag):
--     post()
--   hs.timer.usleep(10) -- little delay to mimic the system keyRepeatTime
-- end

-- sendKeyStrokeSimple = function(funKey, keyToSend, modifiers, tag)
--   local event = require("hs.eventtap").event
--   funKey(event, keyToSend, modifiers, tag)
-- end

-- Function that sends the specified funKey(Down|Up|Repeat) and act according to isHyperPressed
sendKeyStroke = function(keyType, keyToSend_F18notPressed, keyToSend_F18pressed, modifiers, currTag)
  print("sendKeyStroke")
  local event = require("hs.eventtap").event

  local keyToSend = ternary(isHyperPressed, keyToSend_F18pressed, keyToSend_F18notPressed);
  -- Not a tagIgnore, already ignored. If tagToSend send a tagIgnore, else (no tag) send a tagToSend
  local tagToSend = ternary(currTag == tagToSend, tagIgnore, tagToSend)

  -- Send key
  print(keyType)
keyTypeFunctions[keyType](event, keyToSend, modifiers, tagToSend) -- TODO: could be nil?
end


keyCodeActions = {
  -- ["w"] =             function(x) print(1) end,
  ["return"] = function(type, tag) sendKeyStroke(type, 'return', 'forwarddelete', {}, tag); end,
  ["delete"] = function(type, tag) sendKeyStroke(type, 'delete', 'forwarddelete', {}, tag); end,
  ["space"] =  function(type, tag) sendKeyStroke(type, 'space', 'delete', {}, tag); end,
  ["tab"] =    function(type, tag) sendKeyStroke(type, 'tab', 'capslock', {}, tag); end,
}

-- Listen to keyDown events and discard with tagIgnore
hs.eventtap.new({keyTypes.keyDown}, function(event)
  local tag = event:getProperty(eventSourceUserData);
  if tag == tagIgnore then
    print("tagIgnore, true")
    return true, {} -- delete
  else
    print("notTagIgnore")

    local key = keyCodes[event:getKeyCode()]

    local type = event:getType()

    if key == "return" then

    end


    -- -- get action relative to `key`
    -- local action = keyCodeActions[key]

    -- if action ~= nil then
    --   print("action, true")
    --   action(type, tag)
    --   return true, {} -- delete, I sent another
    -- else
    --   print("no action, false")
    --   return false -- propagate
    -- end
  end
end):start()

-- hs.eventtap.new({keyTypes.keyDown}, function(event)
--     if event:getKeyCode() == hs.keycodes.map[activator] and event:getProperty(hs.eventtap.event.properties.eventSourceUnixProcessID) == 0 then
--       if event:getProperty(hs.eventtap.event.properties.keyboardEventAutorepeat) == 0 then
--         onDown()
--       end
--       return true, {}
--     end
--   end):start()

-- funKeyGeneral = function(key, modifiers)
--   local event = require("hs.eventtap").event
--   event.newKeyEvent(modifiers, string.lower(key), true):post() -- keydown
--   event.newKeyEvent(modifiers, string.lower(key), false):post() -- keyUp
-- end



-- BINDINGS

--   Special keys

-- k:bind({}, 'return', function() sendKeyStroke(funKeyDown,   'return', 'forwarddelete', {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyUp,     'return', 'forwarddelete', {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyRepeat, "return", "forwarddelete", {}, tagKeep); end)

-- k:bind({}, "space",  function() sendKeyStroke(funKeyDown,   "space", "delete", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyUp,     "space", "delete", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyRepeat, "space", "delete", {}, tagKeep); end)

-- k:bind({}, "delete", function() sendKeyStroke(funKeyDown,   "delete", "forwarddelete", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyUp,     "delete", "forwarddelete", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyRepeat, "delete", "forwarddelete", {}, tagKeep); end)

-- k:bind({}, "tab",    function() sendKeyStroke(funKeyDown,   "tab", "capslock", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyUp,     "tab", "capslock", {}, tagKeep); end,
--                      function() sendKeyStroke(funKeyRepeat, "tab", "capslock", {}, tagKeep); end)


--   arrows IJKL

-- k:bind({}, 'j', function() sendKeyStrokeSimple(funKeyDown,   "left", {}, tagKeep); end,
--                 function() sendKeyStrokeSimple(funKeyUp,     "left", {}, tagKeep); end,
--                 function() sendKeyStrokeSimple(funKeyRepeat, "left", {}, tagKeep); end)

-- k:bind({}, 'k', function() sendKeyStrokeSimple(funKeyDown,   "down", {}, tagKeep); end,
--                 function() sendKeyStrokeSimple(funKeyUp,     "down", {}, tagKeep); end,
--                 function() sendKeyStrokeSimple(funKeyRepeat, "down", {}, tagKeep); end)



-- k:bind({}, 'k', function() funKeyDown('DOWN', {}); end, nil,
--                 function() funKeyRepeat('DOWN', {}); end)
-- k:bind({}, 'i', function() funKeyDown('UP', {}); end, nil,
--                 function() funKeyRepeat('UP', {}); end)
-- k:bind({}, 'l', function() funKeyDown('RIGHT', {}); end, nil,
--                 function() funKeyRepeat('RIGHT', {}); end)

-- k:bind({'cmd'}, 'j', function() funKeyDown('LEFT', {'cmd'}); end, nil,
--                      function() funKeyRepeat('LEFT', {'cmd'}); end)
-- k:bind({'cmd'}, 'k', function() funKeyDown('DOWN', {'cmd'}); end, nil,
--                      function() funKeyRepeat('DOWN', {'cmd'}); end)
-- k:bind({'cmd'}, 'i', function() funKeyDown('UP', {'cmd'}); end, nil,
--                      function() funKeyRepeat('UP', {'cmd'}); end)
-- k:bind({'cmd'}, 'l', function() funKeyDown('RIGHT', {'cmd'}); end, nil,
--                      function() funKeyRepeat('RIGHT', {'cmd'}); end)

-- k:bind({'shift'}, 'j', function() funKeyDown('LEFT', {'shift'}); end, nil,
--                        function() funKeyRepeat('LEFT', {'shift'}); end)
-- k:bind({'shift'}, 'k', function() funKeyDown('DOWN', {'shift'}); end, nil,
--                        function() funKeyRepeat('DOWN', {'shift'}); end)
-- k:bind({'shift'}, 'i', function() funKeyDown('UP', {'shift'}); end, nil,
--                        function() funKeyRepeat('UP', {'shift'}); end)
-- k:bind({'shift'}, 'l', function() funKeyDown('RIGHT', {'shift'}); end, nil,
--                        function() funKeyRepeat('RIGHT', {'shift'}); end)

-- k:bind({'alt'}, 'j', function() funKeyDown('LEFT', {'alt'}); end, nil,
--                      function() funKeyRepeat('LEFT', {'alt'}); end)
-- k:bind({'alt'}, 'k', function() funKeyDown('DOWN', {'alt'}); end, nil,
--                      function() funKeyRepeat('DOWN', {'alt'}); end)
-- k:bind({'alt'}, 'i', function() funKeyDown('UP', {'alt'}); end, nil,
--                      function() funKeyRepeat('UP', {'alt'}); end)
-- k:bind({'alt'}, 'l', function() funKeyDown('RIGHT', {'alt'}); end, nil,
--                      function() funKeyRepeat('RIGHT', {'alt'}); end)

-- k:bind({'shift, alt'}, 'j', function() funKeyDown('LEFT', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('LEFT', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 'k', function() funKeyDown('DOWN', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('DOWN', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 'i', function() funKeyDown('UP', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('UP', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 'l', function() funKeyDown('RIGHT', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('RIGHT', {'shift, alt'}); end)

-- k:bind({'shift, cmd'}, 'j', function() funKeyDown('LEFT', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('LEFT', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 'k', function() funKeyDown('DOWN', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('DOWN', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 'i', function() funKeyDown('UP', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('UP', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 'l', function() funKeyDown('RIGHT', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('RIGHT', {'shift, cmd'}); end)

-- k:bind({'ctrl'}, 'j', function() funKeyDown('LEFT', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('LEFT', {'ctrl'}); end)
-- k:bind({'ctrl'}, 'k', function() funKeyDown('DOWN', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('DOWN', {'ctrl'}); end)
-- k:bind({'ctrl'}, 'i', function() funKeyDown('UP', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('UP', {'ctrl'}); end)
-- k:bind({'ctrl'}, 'l', function() funKeyDown('RIGHT', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('RIGHT', {'ctrl'}); end)


-- --   arrows WASD

-- k:bind({}, 'a', function() funKeyDown('LEFT', {}); end, nil,
--                 function() funKeyRepeat('LEFT', {}); end)
-- k:bind({}, 's', function() funKeyDown('DOWN', {}); end, nil,
--                 function() funKeyRepeat('DOWN', {}); end)
-- k:bind({}, 'w', function() funKeyDown('UP', {}); end, nil,
--                 function() funKeyRepeat('UP', {}); end)
-- k:bind({}, 'd', function() funKeyDown('RIGHT', {}); end, nil,
--                 function() funKeyRepeat('RIGHT', {}); end)

-- k:bind({'cmd'}, 'a', function() funKeyDown('LEFT', {'cmd'}); end, nil,
--                      function() funKeyRepeat('LEFT', {'cmd'}); end)
-- k:bind({'cmd'}, 's', function() funKeyDown('DOWN', {'cmd'}); end, nil,
--                      function() funKeyRepeat('DOWN', {'cmd'}); end)
-- k:bind({'cmd'}, 'w', function() funKeyDown('UP', {'cmd'}); end, nil,
--                      function() funKeyRepeat('UP', {'cmd'}); end)
-- k:bind({'cmd'}, 'd', function() funKeyDown('RIGHT', {'cmd'}); end, nil,
--                      function() funKeyRepeat('RIGHT', {'cmd'}); end)

-- k:bind({'shift'}, 'a', function() funKeyDown('LEFT', {'shift'}); end, nil,
--                        function() funKeyRepeat('LEFT', {'shift'}); end)
-- k:bind({'shift'}, 's', function() funKeyDown('DOWN', {'shift'}); end, nil,
--                        function() funKeyRepeat('DOWN', {'shift'}); end)
-- k:bind({'shift'}, 'w', function() funKeyDown('UP', {'shift'}); end, nil,
--                        function() funKeyRepeat('UP', {'shift'}); end)
-- k:bind({'shift'}, 'd', function() funKeyDown('RIGHT', {'shift'}); end, nil,
--                        function() funKeyRepeat('RIGHT', {'shift'}); end)

-- k:bind({'alt'}, 'a', function() funKeyDown('LEFT', {'alt'}); end, nil,
--                      function() funKeyRepeat('LEFT', {'alt'}); end)
-- k:bind({'alt'}, 's', function() funKeyDown('DOWN', {'alt'}); end, nil,
--                      function() funKeyRepeat('DOWN', {'alt'}); end)
-- k:bind({'alt'}, 'w', function() funKeyDown('UP', {'alt'}); end, nil,
--                      function() funKeyRepeat('UP', {'alt'}); end)
-- k:bind({'alt'}, 'd', function() funKeyDown('RIGHT', {'alt'}); end, nil,
--                      function() funKeyRepeat('RIGHT', {'alt'}); end)

-- k:bind({'shift, alt'}, 'a', function() funKeyDown('LEFT', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('LEFT', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 's', function() funKeyDown('DOWN', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('DOWN', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 'w', function() funKeyDown('UP', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('UP', {'shift, alt'}); end)
-- k:bind({'shift, alt'}, 'd', function() funKeyDown('RIGHT', {'shift, alt'}); end, nil,
--                             function() funKeyRepeat('RIGHT', {'shift, alt'}); end)

-- k:bind({'shift, cmd'}, 'a', function() funKeyDown('LEFT', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('LEFT', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 's', function() funKeyDown('DOWN', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('DOWN', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 'w', function() funKeyDown('UP', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('UP', {'shift, cmd'}); end)
-- k:bind({'shift, cmd'}, 'd', function() funKeyDown('RIGHT', {'shift, cmd'}); end, nil,
--                             function() funKeyRepeat('RIGHT', {'shift, cmd'}); end)

-- k:bind({'ctrl'}, 'a', function() funKeyDown('LEFT', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('LEFT', {'ctrl'}); end)
-- k:bind({'ctrl'}, 's', function() funKeyDown('DOWN', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('DOWN', {'ctrl'}); end)
-- k:bind({'ctrl'}, 'w', function() funKeyDown('UP', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('UP', {'ctrl'}); end)
-- k:bind({'ctrl'}, 'd', function() funKeyDown('RIGHT', {'ctrl'}); end, nil,
--                       function() funKeyRepeat('RIGHT', {'ctrl'}); end)



-------------------------------
-- ACCENTED CHARACTERS
-------------------------------

-- Whether left alt or right alt are pressed
left_alt = false

-- Listen to flags changes to update the alt state
hs.eventtap.new({keyTypes.flagsChanged}, function(e)
  local flags = e:getFlags()
  local keyCode = e:getKeyCode()
  if flags.alt and not (flags.cmd or flags.shift or flags.ctrl or flags.fn) then
    local keyCode = e:getKeyCode()
    if keyCode == 0x3A then
      left_alt = true
    elseif keyCode == 0x3D then
      left_alt = false
    end
  end
end):start()

-- Bindings
hs.hotkey.bind({"alt"}, "A", function()
  if left_alt then hs.eventtap.keyStrokes(' à')
              else hs.eventtap.keyStrokes(' á')
  end
end)

hs.hotkey.bind({"alt, shift"}, "A", function()
  if left_alt then hs.eventtap.keyStrokes(' À')
              else hs.eventtap.keyStrokes(' Á')
  end
end)

hs.hotkey.bind({"alt"}, "E", function()
  if left_alt then hs.eventtap.keyStrokes('è')
              else hs.eventtap.keyStrokes('é')
  end
end)

hs.hotkey.bind({"alt", "shift"}, "E", function()
  if left_alt then hs.eventtap.keyStrokes('É')
              else hs.eventtap.keyStrokes('È')
  end
end)

hs.hotkey.bind({"alt"}, "I", function()
  if left_alt then hs.eventtap.keyStrokes('ì')
              else hs.eventtap.keyStrokes('í')
  end
end)

hs.hotkey.bind({"alt, shift"}, "I", function()
  if left_alt then hs.eventtap.keyStrokes('Ì')
              else hs.eventtap.keyStrokes('Í')
  end
end)

hs.hotkey.bind({"alt"}, "O", function()
  if left_alt then hs.eventtap.keyStrokes('ò')
              else hs.eventtap.keyStrokes('ó')
  end
end)

hs.hotkey.bind({"alt, shift"}, "O", function()
  if left_alt then hs.eventtap.keyStrokes('Ò')
              else hs.eventtap.keyStrokes('Ó')
  end
end)

hs.hotkey.bind({"alt"}, "U", function()
  if left_alt then hs.eventtap.keyStrokes('ù')
              else hs.eventtap.keyStrokes('ú')
  end
end)

hs.hotkey.bind({"alt, shift"}, "U", function()
  if left_alt then hs.eventtap.keyStrokes('Ù')
              else hs.eventtap.keyStrokes('Ú')
  end
end)
