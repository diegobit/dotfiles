-- require 'caffeine'

-- to be passed as last parameter to functions that call hs.eventtap.keyStroke in order to have no delay
-- no_delay = hs.eventtap.keyRepeatDelay()

require 'hyper'

-------------------------------
-- HYPER MODE CONFIGURATIONS
-------------------------------

-- Event generated by us must be tagged in order to distinguish them from real events.
local fakeIdToIgnore = 64734
local fakeIdToKeep = 34763
local eventSourceUserData = hs.eventtap.event.properties.eventSourceUserData

-- FUNCTIONS

funKeyDown = function(event, key, modifiers, withFakeId)
  print("down " .. key)
  event.newKeyEvent(modifiers, string.lower(key), true):
    setProperty(eventSourceUserData, withFakeId):
    post()
  -- k.triggered = true
end

funKeyUp = function(event, key, modifiers, withFakeId)
  print("up " .. key)
  event.newKeyEvent(modifiers, string.lower(key), false):
    setProperty(eventSourceUserData, withFakeId):
    post()
end

funKeyRepeat = function(event, key, modifiers, withFakeId)
  print("repeat " .. key)
  event.newKeyEvent(modifiers, string.lower(key), true):
    setProperty(eventSourceUserData, withFakeId):
    post()
  hs.timer.usleep(10) -- little delay to mimic the system keyRepeatTime
end

sendKeySimple = function(funKey, keyToSend, modifiers, withFakeId)
  local event = require("hs.eventtap").event
  funKey(event, keyToSend, modifiers, withFakeId)
end

-- Function that sends the specified funKey(Down|Up|Repeat) and act according to isHyperPressed
sendKeyHyperAware = function(funKey, keyToSend_F18notPressed, keyToSend_F18pressed, modifiers, withFakeId)
  local event = require("hs.eventtap").event
  
  if not (isHyperPressed) then
    funKey(event, keyToSend_F18notPressed, modifiers, withFakeId)
  else
    funKey(event, keyToSend_F18pressed, modifiers, withFakeId)
  end
end

-- -- Listen to keyDown events and discard with fakeIdToIgnore
-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--   if event:getProperty(hs.eventtap.event.properties.eventSourceUserData) == fakeIdToIgnore then 
--     print("true")
--     return true, {}
--   else
--     print("false")
--     return false
--   end
-- end):start()

-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--     if event:getKeyCode() == hs.keycodes.map[activator] and event:getProperty(hs.eventtap.event.properties.eventSourceUnixProcessID) == 0 then
--       if event:getProperty(hs.eventtap.event.properties.keyboardEventAutorepeat) == 0 then
--         onDown()
--       end
--       return true, {}
--     end
--   end):start()

-- funKeyGeneral = function(key, modifiers)      
--   local event = require("hs.eventtap").event
--   event.newKeyEvent(modifiers, string.lower(key), true):post() -- keydown
--   event.newKeyEvent(modifiers, string.lower(key), false):post() -- keyUp
-- end



-- BINDINGS

--   Special keys

k:bind({}, 'return', function() sendKeyHyperAware(funKeyDown,   'return', 'forwarddelete', {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyUp,     'return', 'forwarddelete', {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyRepeat, "return", "forwarddelete", {}, fakeIdToKeep); end)

k:bind({}, "space",  function() sendKeyHyperAware(funKeyDown,   "space", "delete", {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyUp,     "space", "delete", {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyRepeat, "space", "delete", {}, fakeIdToKeep); end)

-- k:bind({}, "delete", function() sendKeyHyperAware(funKeyDown,   "delete", "forwarddelete", {}, fakeIdToKeep); end,
--                      function() sendKeyHyperAware(funKeyUp,     "delete", "forwarddelete", {}, fakeIdToKeep); end,
--                      function() sendKeyHyperAware(funKeyRepeat, "delete", "forwarddelete", {}, fakeIdToKeep); end)

k:bind({}, "tab",    function() sendKeyHyperAware(funKeyDown,   "tab", "capslock", {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyUp,     "tab", "capslock", {}, fakeIdToKeep); end,
                     function() sendKeyHyperAware(funKeyRepeat, "tab", "capslock", {}, fakeIdToKeep); end)


--   arrows IJKL

k:bind({}, 'j', function() sendKeySimple(funKeyDown,   "left", {}, fakeIdToKeep); end,
                function() sendKeySimple(funKeyUp,     "left", {}, fakeIdToKeep); end,
                function() sendKeySimple(funKeyRepeat, "left", {}, fakeIdToKeep); end)
                
k:bind({}, 'k', function() sendKeySimple(funKeyDown,   "down", {}, fakeIdToKeep); end,
                function() sendKeySimple(funKeyUp,     "down", {}, fakeIdToKeep); end,
                function() sendKeySimple(funKeyRepeat, "down", {}, fakeIdToKeep); end)



-- k:bind({}, 'k', function() funKeyDown('DOWN', {}); end, nil,
--                 function() funKeyRepeat('DOWN', {}); end)
k:bind({}, 'i', function() funKeyDown('UP', {}); end, nil,
                function() funKeyRepeat('UP', {}); end)
k:bind({}, 'l', function() funKeyDown('RIGHT', {}); end, nil,
                function() funKeyRepeat('RIGHT', {}); end)

k:bind({'cmd'}, 'j', function() funKeyDown('LEFT', {'cmd'}); end, nil,
                     function() funKeyRepeat('LEFT', {'cmd'}); end)
k:bind({'cmd'}, 'k', function() funKeyDown('DOWN', {'cmd'}); end, nil,
                     function() funKeyRepeat('DOWN', {'cmd'}); end)
k:bind({'cmd'}, 'i', function() funKeyDown('UP', {'cmd'}); end, nil,
                     function() funKeyRepeat('UP', {'cmd'}); end)
k:bind({'cmd'}, 'l', function() funKeyDown('RIGHT', {'cmd'}); end, nil,
                     function() funKeyRepeat('RIGHT', {'cmd'}); end)

k:bind({'shift'}, 'j', function() funKeyDown('LEFT', {'shift'}); end, nil,
                       function() funKeyRepeat('LEFT', {'shift'}); end)
k:bind({'shift'}, 'k', function() funKeyDown('DOWN', {'shift'}); end, nil,
                       function() funKeyRepeat('DOWN', {'shift'}); end)
k:bind({'shift'}, 'i', function() funKeyDown('UP', {'shift'}); end, nil,
                       function() funKeyRepeat('UP', {'shift'}); end)
k:bind({'shift'}, 'l', function() funKeyDown('RIGHT', {'shift'}); end, nil,
                       function() funKeyRepeat('RIGHT', {'shift'}); end)

k:bind({'alt'}, 'j', function() funKeyDown('LEFT', {'alt'}); end, nil,
                     function() funKeyRepeat('LEFT', {'alt'}); end)
k:bind({'alt'}, 'k', function() funKeyDown('DOWN', {'alt'}); end, nil,
                     function() funKeyRepeat('DOWN', {'alt'}); end)
k:bind({'alt'}, 'i', function() funKeyDown('UP', {'alt'}); end, nil,
                     function() funKeyRepeat('UP', {'alt'}); end)
k:bind({'alt'}, 'l', function() funKeyDown('RIGHT', {'alt'}); end, nil,
                     function() funKeyRepeat('RIGHT', {'alt'}); end)

k:bind({'shift, alt'}, 'j', function() funKeyDown('LEFT', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('LEFT', {'shift, alt'}); end)
k:bind({'shift, alt'}, 'k', function() funKeyDown('DOWN', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('DOWN', {'shift, alt'}); end)
k:bind({'shift, alt'}, 'i', function() funKeyDown('UP', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('UP', {'shift, alt'}); end)
k:bind({'shift, alt'}, 'l', function() funKeyDown('RIGHT', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('RIGHT', {'shift, alt'}); end)

k:bind({'shift, cmd'}, 'j', function() funKeyDown('LEFT', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('LEFT', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 'k', function() funKeyDown('DOWN', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('DOWN', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 'i', function() funKeyDown('UP', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('UP', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 'l', function() funKeyDown('RIGHT', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('RIGHT', {'shift, cmd'}); end)

k:bind({'ctrl'}, 'j', function() funKeyDown('LEFT', {'ctrl'}); end, nil,
                      function() funKeyRepeat('LEFT', {'ctrl'}); end)
k:bind({'ctrl'}, 'k', function() funKeyDown('DOWN', {'ctrl'}); end, nil,
                      function() funKeyRepeat('DOWN', {'ctrl'}); end)
k:bind({'ctrl'}, 'i', function() funKeyDown('UP', {'ctrl'}); end, nil,
                      function() funKeyRepeat('UP', {'ctrl'}); end)
k:bind({'ctrl'}, 'l', function() funKeyDown('RIGHT', {'ctrl'}); end, nil,
                      function() funKeyRepeat('RIGHT', {'ctrl'}); end)


--   arrows WASD

k:bind({}, 'a', function() funKeyDown('LEFT', {}); end, nil,
                function() funKeyRepeat('LEFT', {}); end)
k:bind({}, 's', function() funKeyDown('DOWN', {}); end, nil,
                function() funKeyRepeat('DOWN', {}); end)
k:bind({}, 'w', function() funKeyDown('UP', {}); end, nil,
                function() funKeyRepeat('UP', {}); end)
k:bind({}, 'd', function() funKeyDown('RIGHT', {}); end, nil,
                function() funKeyRepeat('RIGHT', {}); end)

k:bind({'cmd'}, 'a', function() funKeyDown('LEFT', {'cmd'}); end, nil,
                     function() funKeyRepeat('LEFT', {'cmd'}); end)
k:bind({'cmd'}, 's', function() funKeyDown('DOWN', {'cmd'}); end, nil,
                     function() funKeyRepeat('DOWN', {'cmd'}); end)
k:bind({'cmd'}, 'w', function() funKeyDown('UP', {'cmd'}); end, nil,
                     function() funKeyRepeat('UP', {'cmd'}); end)
k:bind({'cmd'}, 'd', function() funKeyDown('RIGHT', {'cmd'}); end, nil,
                     function() funKeyRepeat('RIGHT', {'cmd'}); end)

k:bind({'shift'}, 'a', function() funKeyDown('LEFT', {'shift'}); end, nil,
                       function() funKeyRepeat('LEFT', {'shift'}); end)
k:bind({'shift'}, 's', function() funKeyDown('DOWN', {'shift'}); end, nil,
                       function() funKeyRepeat('DOWN', {'shift'}); end)
k:bind({'shift'}, 'w', function() funKeyDown('UP', {'shift'}); end, nil,
                       function() funKeyRepeat('UP', {'shift'}); end)
k:bind({'shift'}, 'd', function() funKeyDown('RIGHT', {'shift'}); end, nil,
                       function() funKeyRepeat('RIGHT', {'shift'}); end)

k:bind({'alt'}, 'a', function() funKeyDown('LEFT', {'alt'}); end, nil,
                     function() funKeyRepeat('LEFT', {'alt'}); end)
k:bind({'alt'}, 's', function() funKeyDown('DOWN', {'alt'}); end, nil,
                     function() funKeyRepeat('DOWN', {'alt'}); end)
k:bind({'alt'}, 'w', function() funKeyDown('UP', {'alt'}); end, nil,
                     function() funKeyRepeat('UP', {'alt'}); end)
k:bind({'alt'}, 'd', function() funKeyDown('RIGHT', {'alt'}); end, nil,
                     function() funKeyRepeat('RIGHT', {'alt'}); end)

k:bind({'shift, alt'}, 'a', function() funKeyDown('LEFT', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('LEFT', {'shift, alt'}); end)
k:bind({'shift, alt'}, 's', function() funKeyDown('DOWN', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('DOWN', {'shift, alt'}); end)
k:bind({'shift, alt'}, 'w', function() funKeyDown('UP', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('UP', {'shift, alt'}); end)
k:bind({'shift, alt'}, 'd', function() funKeyDown('RIGHT', {'shift, alt'}); end, nil,
                            function() funKeyRepeat('RIGHT', {'shift, alt'}); end)

k:bind({'shift, cmd'}, 'a', function() funKeyDown('LEFT', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('LEFT', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 's', function() funKeyDown('DOWN', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('DOWN', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 'w', function() funKeyDown('UP', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('UP', {'shift, cmd'}); end)
k:bind({'shift, cmd'}, 'd', function() funKeyDown('RIGHT', {'shift, cmd'}); end, nil,
                            function() funKeyRepeat('RIGHT', {'shift, cmd'}); end)

k:bind({'ctrl'}, 'a', function() funKeyDown('LEFT', {'ctrl'}); end, nil,
                      function() funKeyRepeat('LEFT', {'ctrl'}); end)
k:bind({'ctrl'}, 's', function() funKeyDown('DOWN', {'ctrl'}); end, nil,
                      function() funKeyRepeat('DOWN', {'ctrl'}); end)
k:bind({'ctrl'}, 'w', function() funKeyDown('UP', {'ctrl'}); end, nil,
                      function() funKeyRepeat('UP', {'ctrl'}); end)
k:bind({'ctrl'}, 'd', function() funKeyDown('RIGHT', {'ctrl'}); end, nil,
                      function() funKeyRepeat('RIGHT', {'ctrl'}); end)



-------------------------------
-- ACCENTED CHARACTERS
-------------------------------

-- Whether left alt or right alt are pressed
left_alt = false

-- Listen to flags changes to update the alt state
hs.eventtap.new({hs.eventtap.event.types.flagsChanged}, function(e)
  local flags = e:getFlags()
  local keyCode = e:getKeyCode()
  if flags.alt and not (flags.cmd or flags.shift or flags.ctrl or flags.fn) then
    local keyCode = e:getKeyCode()
    if keyCode == 0x3A then
      left_alt = true
    elseif keyCode == 0x3D then
      left_alt = false
    end
  end
end):start()

-- Bindings
hs.hotkey.bind({"alt"}, "A", function()
  if left_alt then hs.eventtap.keyStrokes(' à')
              else hs.eventtap.keyStrokes(' á')
  end
end)

hs.hotkey.bind({"alt, shift"}, "A", function()
  if left_alt then hs.eventtap.keyStrokes(' À')
              else hs.eventtap.keyStrokes(' Á')
  end
end)

hs.hotkey.bind({"alt"}, "E", function()
  if left_alt then hs.eventtap.keyStrokes('è')
              else hs.eventtap.keyStrokes('é')
  end
end)

hs.hotkey.bind({"alt", "shift"}, "E", function()
  if left_alt then hs.eventtap.keyStrokes('É')
              else hs.eventtap.keyStrokes('È')
  end
end)

hs.hotkey.bind({"alt"}, "I", function()
  if left_alt then hs.eventtap.keyStrokes('ì')
              else hs.eventtap.keyStrokes('í')
  end
end)

hs.hotkey.bind({"alt, shift"}, "I", function()
  if left_alt then hs.eventtap.keyStrokes('Ì')
              else hs.eventtap.keyStrokes('Í')
  end
end)

hs.hotkey.bind({"alt"}, "O", function()
  if left_alt then hs.eventtap.keyStrokes('ò')
              else hs.eventtap.keyStrokes('ó')
  end
end)

hs.hotkey.bind({"alt, shift"}, "O", function()
  if left_alt then hs.eventtap.keyStrokes('Ò')
              else hs.eventtap.keyStrokes('Ó')
  end
end)

hs.hotkey.bind({"alt"}, "U", function()
  if left_alt then hs.eventtap.keyStrokes('ù')
              else hs.eventtap.keyStrokes('ú')
  end
end)

hs.hotkey.bind({"alt, shift"}, "U", function()
  if left_alt then hs.eventtap.keyStrokes('Ù')
              else hs.eventtap.keyStrokes('Ú')
  end
end)
