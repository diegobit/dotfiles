-- require 'caffeine'

-- to be passed as last parameter to functions that call hs.eventtap.keyStroke in order to have no delay
-- no_delay = hs.eventtap.keyRepeatDelay()

require 'hyper'

-------------------------------
-- HYPER MODE CONFIGURATIONS
-------------------------------

-- Event generated by us must be tagged in order to distinguish them from real events.
local fakeIdToIgnore = 64734
local fakeIdToKeep = 34763
local eventSourceUserData = hs.eventtap.event.properties.eventSourceUserData

-- FUNCTIONS

funKeyDown = function(event, key, modifiers, withFakeId)
  -- print("down " .. key)
  event.newKeyEvent(modifiers, string.lower(key), true):
    setProperty(eventSourceUserData, withFakeId):
    post()
  -- k.triggered = true
end

funKeyUp = function(event, key, modifiers, withFakeId)
  -- print("up " .. key)
  event.newKeyEvent(modifiers, string.lower(key), false):
    setProperty(eventSourceUserData, withFakeId):
    post()
end

funKeyRepeat = function(event, key, modifiers, withFakeId)
  -- print("repeat " .. key)
  event.newKeyEvent(modifiers, string.lower(key), true):
    setProperty(eventSourceUserData, withFakeId):
    post()
  hs.timer.usleep(10) -- little delay to mimic the system keyRepeatTime
end

sendKeySimple = function(funKey, keyToSend, modifiers, withFakeId)
  local event = require("hs.eventtap").event
  funKey(event, keyToSend, modifiers, withFakeId)
end

-- Function that sends the specified funKey(Down|Up|Repeat) and act according to isHyperPressed
sendKeyHyperAware = function(funKey, keyToSend_F18notPressed, keyToSend_F18pressed, modifiers, withFakeId)
  local event = require("hs.eventtap").event

  if not (isHyperPressed) then
    funKey(event, keyToSend_F18notPressed, modifiers, withFakeId)
  else
    funKey(event, keyToSend_F18pressed, modifiers, withFakeId)
  end
end

-- -- Listen to keyDown events and discard with fakeIdToIgnore
-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--   if event:getProperty(hs.eventtap.event.properties.eventSourceUserData) == fakeIdToIgnore then
--     print("true")
--     return true, {}
--   else
--     print("false")
--     return false
--   end
-- end):start()

-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--     if event:getKeyCode() == hs.keycodes.map[activator] and event:getProperty(hs.eventtap.event.properties.eventSourceUnixProcessID) == 0 then
--       if event:getProperty(hs.eventtap.event.properties.keyboardEventAutorepeat) == 0 then
--         onDown()
--       end
--       return true, {}
--     end
--   end):start()

-- funKeyGeneral = function(key, modifiers)
--   local event = require("hs.eventtap").event
--   event.newKeyEvent(modifiers, string.lower(key), true):post() -- keydown
--   event.newKeyEvent(modifiers, string.lower(key), false):post() -- keyUp
-- end



-- BINDINGS

--   Anne Pro Left Command workaround

-- Listen to keyDown events and discard with fakeIdToIgnore
-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--   local keyCode = e:getKeyCode()
--   print(keyCode)
--   onDown()
--   return false
-- end):start()

-- hs.eventtap.new({hs.eventtap.event.types.keyDown}, function(event)
--   local keyCode = event:getKeyCode()
  
--   if keyCode ~= 107 then
--     return false
--   end

--   hs.eventtap.event.newKeyEvent(hs.eventtap.event):setFlags({"cmd", true}):post()

--   -- Do not send event on
--   return true
-- end):start()

-- hs.eventtap.new({hs.eventtap.event.types.keyUp}, function(event) 
--   local keyCode = event:getKeyCode()
  
--   if keyCode ~= 107 then
--     return false
--   end
  
--   hs.eventtap.event.newKeyEvent(hs.eventtap.event):setFlags({"cmd", false}):post()

--   -- Do not send event on
--   return true
-- end):start()

--   Special keys

k:bind({}, 'return',        function() sendKeyHyperAware(funKeyDown,   'return', 'forwarddelete', {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyUp,     'return', 'forwarddelete', {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyRepeat, "return", "forwarddelete", {}, fakeIdToKeep); end)
k:bind({}, "space",         function() sendKeyHyperAware(funKeyDown,   "space",  "delete",        {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyUp,     "space",  "delete",        {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyRepeat, "space",  "delete",        {}, fakeIdToKeep); end)
k:bind({}, "tab",           function() sendKeyHyperAware(funKeyDown,   "tab",    "capslock",      {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyUp,     "tab",    "capslock",      {}, fakeIdToKeep); end,
                            function() sendKeyHyperAware(funKeyRepeat, "tab",    "capslock",      {}, fakeIdToKeep); end)
-- k:bind({}, "delete", function() sendKeyHyperAware(funKeyDown,   "delete", "forwarddelete", {}, fakeIdToKeep); end,
--                      function() sendKeyHyperAware(funKeyUp,     "delete", "forwarddelete", {}, fakeIdToKeep); end,
--                      function() sendKeyHyperAware(funKeyRepeat, "delete", "forwarddelete", {}, fakeIdToKeep); end)


--   arrows IJKL

k:bind({},             'j', function() sendKeySimple(funKeyDown,   "left",  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     "left",  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, "left",  {},               fakeIdToKeep); end)
k:bind({},             'k', function() sendKeySimple(funKeyDown,   "down",  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     "down",  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, "down",  {},               fakeIdToKeep); end)
k:bind({},             'i', function() sendKeySimple(funKeyDown,   'up',    {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {},               fakeIdToKeep); end)
k:bind({},             'l', function() sendKeySimple(funKeyDown,   'right', {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {},               fakeIdToKeep); end)
k:bind({'cmd'},        'j', function() sendKeySimple(funKeyDown,   'left',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'},        'k', function() sendKeySimple(funKeyDown,   'down',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'},        'i', function() sendKeySimple(funKeyDown,   'up',    {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'},        'l', function() sendKeySimple(funKeyDown,   'right', {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'cmd'},          fakeIdToKeep); end)
k:bind({'shift'},      'j', function() sendKeySimple(funKeyDown,   'left',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift'},        fakeIdToKeep); end)
k:bind({'shift'},      'k', function() sendKeySimple(funKeyDown,   'down',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift'},        fakeIdToKeep); end)
k:bind({'shift'},      'i', function() sendKeySimple(funKeyDown,   'up',    {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift'},        fakeIdToKeep); end)
k:bind({'shift'},      'l', function() sendKeySimple(funKeyDown,   'right', {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift'},        fakeIdToKeep); end)
k:bind({'alt'},        'j', function() sendKeySimple(funKeyDown,   'left',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'alt'},          fakeIdToKeep); end)
k:bind({'alt'},        'k', function() sendKeySimple(funKeyDown,   'down',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'alt'},          fakeIdToKeep); end)
k:bind({'alt'},        'i', function() sendKeySimple(funKeyDown,   'up',    {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'alt'},          fakeIdToKeep); end)
k:bind({'alt'},        'l', function() sendKeySimple(funKeyDown,   'right', {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'alt'},          fakeIdToKeep); end)
k:bind({'shift, alt'}, 'j', function() sendKeySimple(funKeyDown,   'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 'k', function() sendKeySimple(funKeyDown,   'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 'i', function() sendKeySimple(funKeyDown,   'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 'l', function() sendKeySimple(funKeyDown,   'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'j', function() sendKeySimple(funKeyDown,   'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'k', function() sendKeySimple(funKeyDown,   'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'i', function() sendKeySimple(funKeyDown,   'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'l', function() sendKeySimple(funKeyDown,   'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'ctrl'},       'j', function() sendKeySimple(funKeyDown,   'left',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'},       'k', function() sendKeySimple(funKeyDown,   'down',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'},       'i', function() sendKeySimple(funKeyDown,   'up',    {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'},       'l', function() sendKeySimple(funKeyDown,   'right', {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'ctrl'},         fakeIdToKeep); end)


--   arrows WASD

k:bind({}, 'a',             function() sendKeySimple(funKeyDown,   'left',  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {},               fakeIdToKeep); end)
k:bind({}, 's',             function() sendKeySimple(funKeyDown,   'down',  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {},               fakeIdToKeep); end)
k:bind({}, 'w',             function() sendKeySimple(funKeyDown,   'up',    {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {},               fakeIdToKeep); end)
k:bind({}, 'd',             function() sendKeySimple(funKeyDown,   'right', {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {},               fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {},               fakeIdToKeep); end)
k:bind({'cmd'}, 'a',        function() sendKeySimple(funKeyDown,   'left',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'}, 's',        function() sendKeySimple(funKeyDown,   'down',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'}, 'w',        function() sendKeySimple(funKeyDown,   'up',    {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'cmd'},          fakeIdToKeep); end)
k:bind({'cmd'}, 'd',        function() sendKeySimple(funKeyDown,   'right', {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'cmd'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'cmd'},          fakeIdToKeep); end)
k:bind({'shift'}, 'a',      function() sendKeySimple(funKeyDown,   'left',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift'},        fakeIdToKeep); end)
k:bind({'shift'}, 's',      function() sendKeySimple(funKeyDown,   'down',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift'},        fakeIdToKeep); end)
k:bind({'shift'}, 'w',      function() sendKeySimple(funKeyDown,   'up',    {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift'},        fakeIdToKeep); end)
k:bind({'shift'}, 'd',      function() sendKeySimple(funKeyDown,   'right', {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift'},        fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift'},        fakeIdToKeep); end)
k:bind({'alt'}, 'a',        function() sendKeySimple(funKeyDown,   'left',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'alt'},          fakeIdToKeep); end)
k:bind({'alt'}, 's',        function() sendKeySimple(funKeyDown,   'down',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'alt'},          fakeIdToKeep); end)
k:bind({'alt'}, 'w',        function() sendKeySimple(funKeyDown,   'up',    {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'alt'},          fakeIdToKeep); end)
k:bind({'alt'}, 'd',        function() sendKeySimple(funKeyDown,   'right', {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'alt'},          fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'alt'},          fakeIdToKeep); end)
k:bind({'shift, alt'}, 'a', function() sendKeySimple(funKeyDown,   'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 's', function() sendKeySimple(funKeyDown,   'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 'w', function() sendKeySimple(funKeyDown,   'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, alt'}, 'd', function() sendKeySimple(funKeyDown,   'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'a', function() sendKeySimple(funKeyDown,   'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 's', function() sendKeySimple(funKeyDown,   'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'w', function() sendKeySimple(funKeyDown,   'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'shift, cmd'}, 'd', function() sendKeySimple(funKeyDown,   'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'shift', 'alt'}, fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'shift', 'alt'}, fakeIdToKeep); end)
k:bind({'ctrl'}, 'a',       function() sendKeySimple(funKeyDown,   'left',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'left',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'left',  {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'}, 's',       function() sendKeySimple(funKeyDown,   'down',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'down',  {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'down',  {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'}, 'w',       function() sendKeySimple(funKeyDown,   'up',    {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'up',    {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'up',    {'ctrl'},         fakeIdToKeep); end)
k:bind({'ctrl'}, 'd',       function() sendKeySimple(funKeyDown,   'right', {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyUp,     'right', {'ctrl'},         fakeIdToKeep); end,
                            function() sendKeySimple(funKeyRepeat, 'right', {'ctrl'},         fakeIdToKeep); end)



-------------------------------
-- ACCENTED CHARACTERS
-------------------------------

-- Whether left alt or right alt are pressed
left_alt = false
right_alt = false

-- Listen to flags changes to update the alt state
hs.eventtap.new({hs.eventtap.event.types.flagsChanged}, function(e)
  local flags = e:getFlags()
  local keyCode = e:getKeyCode()
  if flags.alt then
    local keyCode = e:getKeyCode()
    if keyCode == 0x3A then
      left_alt = true
      right_alt = false
    elseif keyCode == 0x3D then
      left_alt = false
      right_alt = true
    end
  else
    left_alt = false
    right_alt = false
  end
end):start()

-- Bindings
hs.hotkey.bind({"alt"}, "A", function()
  if left_alt      then hs.eventtap.keyStrokes(' à')
  elseif right_alt then hs.eventtap.keyStrokes(' á')
  end
end)

hs.hotkey.bind({"alt, shift"}, "A", function()
  if left_alt      then hs.eventtap.keyStrokes(' À')
  elseif right_alt then hs.eventtap.keyStrokes(' Á')
  end
end)

hs.hotkey.bind({"alt"}, "E", function()
  if left_alt      then hs.eventtap.keyStrokes('è')
  elseif right_alt then hs.eventtap.keyStrokes('é')
  end
end)

hs.hotkey.bind({"alt", "shift"}, "E", function()
  if left_alt      then hs.eventtap.keyStrokes('È')
  elseif right_alt then hs.eventtap.keyStrokes('É')
  end
end)

hs.hotkey.bind({"alt"}, "I", function()
  if left_alt      then hs.eventtap.keyStrokes('ì')
  elseif right_alt then hs.eventtap.keyStrokes('í')
  end
end)

hs.hotkey.bind({"alt, shift"}, "I", function()
  if left_alt      then hs.eventtap.keyStrokes('Ì')
  elseif right_alt then hs.eventtap.keyStrokes('Í')
  end
end)

hs.hotkey.bind({"alt"}, "O", function()
  if left_alt      then hs.eventtap.keyStrokes('ò')
  elseif right_alt then hs.eventtap.keyStrokes('ó')
  end
end)

hs.hotkey.bind({"alt, shift"}, "O", function()
  if left_alt      then hs.eventtap.keyStrokes('Ò')
  elseif right_alt then hs.eventtap.keyStrokes('Ó')
  end
end)

hs.hotkey.bind({"alt"}, "U", function()
  if left_alt      then hs.eventtap.keyStrokes('ù')
  elseif right_alt then hs.eventtap.keyStrokes('ú')
  end
end)

hs.hotkey.bind({"alt, shift"}, "U", function()
  if left_alt      then hs.eventtap.keyStrokes('Ù')
  elseif right_alt then hs.eventtap.keyStrokes('Ú')
  end
end)
